// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Resarvation.Models;

namespace Resarvation.Migrations.Reservation
{
    [DbContext(typeof(ReservationContext))]
    [Migration("20210310093802_addModels")]
    partial class addModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Resarvation.Models.Aspnetrole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetroles");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetusers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Aspnetuser");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetuserclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("aspnetuserclaims");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetuserlogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetuserrole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetusertoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("aspnetusertokens");
                });

            modelBuilder.Entity("Resarvation.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasColumnType("varchar(95)")
                        .UseCollation("latin1_swedish_ci")
                        .HasCharSet("latin1");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .UseCollation("latin1_swedish_ci")
                        .HasCharSet("latin1");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("Resarvation.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Resarvation.Models.TypeReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TypeReservations");
                });

            modelBuilder.Entity("Resarvation.Models.Student", b =>
                {
                    b.HasBaseType("Resarvation.Models.Aspnetuser");

                    b.Property<string>("Class")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ResCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetroleclaim", b =>
                {
                    b.HasOne("Resarvation.Models.Aspnetrole", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetuserclaim", b =>
                {
                    b.HasOne("Resarvation.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetuserlogin", b =>
                {
                    b.HasOne("Resarvation.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetuserrole", b =>
                {
                    b.HasOne("Resarvation.Models.Aspnetrole", "Role")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resarvation.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetusertoken", b =>
                {
                    b.HasOne("Resarvation.Models.Aspnetuser", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetrole", b =>
                {
                    b.Navigation("Aspnetroleclaims");

                    b.Navigation("Aspnetuserroles");
                });

            modelBuilder.Entity("Resarvation.Models.Aspnetuser", b =>
                {
                    b.Navigation("Aspnetuserclaims");

                    b.Navigation("Aspnetuserlogins");

                    b.Navigation("Aspnetuserroles");

                    b.Navigation("Aspnetusertokens");
                });
#pragma warning restore 612, 618
        }
    }
}
